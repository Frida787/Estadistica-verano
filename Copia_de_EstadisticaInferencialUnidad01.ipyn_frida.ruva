{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Frida787/Estadistica-verano/blob/main/Copia_de_EstadisticaInferencialUnidad01.ipyn_frida.ruva\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Unidad 1. Regresión lineal simple y correlación"
      ],
      "metadata": {
        "id": "TVAzcQ4lsIje"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Medidas de dispersión\n",
        "Suma de los cuadrados de las desviaciones de los valores de $X$ con respecto a su media:\n",
        "$$ S_{xx} = \\sum_{i=1}^{n} (X_i - \\bar{X})^2 $$\n",
        "Suma de los productos de las desviaciones de los valores de $X$ y $Y$ con respecto a sus medias:\n",
        "$$S_{xy} = \\sum_{i=1}^{n} (X_i - \\bar{X})(Y_i - \\bar{Y})$$\n",
        "Suma de los cuadrados de las desviaciones de los valores de $Y$ con respecto a su media:\n",
        "$$ S_{xx} = \\sum_{i=1}^{n} (Y_i - \\bar{Y})^2 $$\n"
      ],
      "metadata": {
        "id": "rh_egttcs5VI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Coeficiente de correlación y de determinación\n",
        "Coeficiente de correlación de Pearson:\n",
        "$$ r = \\frac{S_{xy}}{\\sqrt{S_{xx} \\cdot S_{yy}}} $$\n",
        "Coeficiente de determinación:\n",
        "$$ r^2 $$"
      ],
      "metadata": {
        "id": "BqCWSQNGvU22"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Recta de regresión ajustada\n",
        "La regresión lineal ajustada se representa mediante estadísticos:\n",
        "$$ \\hat{Y} = b_0 + b_1 X $$\n",
        "donde $\\hat{Y}$ representa el valor de $Y$ obtenido mediante la recta de regresión ajustada (no la verdadera $Y$). Los estadísticos $b_0$ y $b_1$ se calculan de la siguiente manera:\n",
        "\n",
        "$$b_1 = \\frac{S_{xy}}{S_{xx}}$$\n",
        "\n",
        "$$ b_0 = \\bar{Y} - b_1 \\bar{X} $$"
      ],
      "metadata": {
        "id": "MTxWw-C7vjOt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cálculo de residuales\n",
        "Residuales:\n",
        "$$e_i = Y_i - \\hat{Y}_i$$"
      ],
      "metadata": {
        "id": "Tng5HL6e2ioR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Sumas de cuadrados SS (Sum of Squares)\n",
        "Suma de los Cuadrados de los Errores:\n",
        "$$ SSE = \\sum_{i=1}^{n} (Y_i - \\hat{Y}_i)^2 = \\sum_{i=1}^n e_i^2$$\n",
        "Suma total de cuadrados:\n",
        "$$SST = \\sum_{i=1}^{n} (Y_i - \\bar{Y})^2$$\n",
        "Suma de cuadrados de regresión:\n",
        "$$SSR = \\sum_{i=1}^{n} (\\hat{Y_i} - \\bar{Y})^2$$\n",
        "- SST: Mide la variabilidad total de los datos observados.\n",
        "- SSR: Mide la variabilidad de los datos que el modelo de regresión explica.\n",
        "- SSE: Mide la variabilidad no explicada por el modelo (es decir, los residuos).\n"
      ],
      "metadata": {
        "id": "1tKbBa4T3dQH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Intervalo de confianza\n",
        "Estadístico de prueba _t_:\n",
        "$$t = \\frac{b_1}{SE(b_1)}$$\n",
        "Error estándar de $b_1$:\n",
        "$$SE(b_1) = \\frac{\\sqrt{SSE / (n-2)}}   {\\sqrt{S_{xx}} }$$\n",
        "o\n",
        "$$SE(b_1) = \\frac{\\sqrt{\\sum_{i=1}^{n} (Y_i - \\hat{Y}_i)^2  / (n-2)}}   {\\sqrt{S_{xx}} }$$\n",
        "\n",
        "Intervalo de confianza para $b_1$:\n",
        "$$b_1 - t_{\\alpha/2} \\cdot SE(b_1) \\lt \\beta_1 \\lt b_1 + t_{\\alpha/2} \\cdot SE(b_1)$$\n",
        "donde $n$ representa la cantidad de pares de datos."
      ],
      "metadata": {
        "id": "fL4VVE5GRLg6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Comprobación de supuestos\n",
        "Comprobar suposiciones:\n",
        "- Test de shapiro a los residuales $e_i$: Para comprobar si la distribución es normal sobre la recta.\n",
        "- Grafico $X$ vs $Y$: Para observar si los datos soportan la suposición de linealidad.\n",
        "- Gráfico de residuales: Para observar si los datos soportan la suposición de linealidad, complementario al coeficiente de correlación\n",
        "- Test de Breusch-Pagan: Para detectar heteroscedasticidad en regresion lineal"
      ],
      "metadata": {
        "id": "s61W7Msz8BsH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Test de Shapiro:<br>\n",
        "`from scipy.stats import shapiro`<br>\n",
        "Después, se obtiene el valor-p:<br>\n",
        "`_, valor_p_sh = shapiro(data)`<br>\n",
        "- $H_0$: Los datos siguen una distribución normal\n",
        "- $H_1$: Los datos no siguen una distribución normal"
      ],
      "metadata": {
        "id": "IbD1iORXB5Wv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Test de Breusch-Pagan:<br>\n",
        "`from statsmodels.stats.api import het_breuschpagan`<br>\n",
        "Después, se obtiene el valor-p:<br>\n",
        "`_, valor_p_bp, _, _ = het_breuschpagan(residuales, X)`\n",
        "- $H_0$: Hay homoscedasticidad\n",
        "- $H_1$: Hay heteroscedasticidad"
      ],
      "metadata": {
        "id": "b12qtYRqDWC1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ANOVA en regresión lineal\n",
        "\n",
        "| Fuente de variación | Suma de cuadrados (SS) | Grados de libertad (df) | Promedio de los cuadrados (MS) | Estadístico F |\n",
        "|---------------------|------------------------|--------------------------|--------------------------------|---------------|\n",
        "| Regresión  | $ SSR$ | $p$ | $MSR = \\frac{SSR}{p}$ | $F = \\frac{MSR}{MSE}$|\n",
        "| Error | $SSE$| $n - p - 1 $| $MSE = \\frac{SSE}{n - p - 1} $|     |\n",
        "| Total | $SST $| $n - 1$|             |        |\n",
        "\n",
        "donde $p$ es el número de parámetros para la recta de regresión ajustada (en la regresión simple $p=1$). Las hipótesis son:\n",
        "$$H_0: \\beta_1 = 0$$\n",
        "$$H_1: \\beta_1 \\ne 0 $$"
      ],
      "metadata": {
        "id": "5jtxbLDlB3zw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problemario de la Unidad 1"
      ],
      "metadata": {
        "id": "MCDhN4YtFTGP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problema 1\n",
        "Un profesor intenta mostrar a sus estudiantes la importancia de los exámenes cortos, aun cuando el 90% de la calificación final esté determinada por los exámenes parciales. Él cree que cuanto más altas sean las calificaciones de los exámenes cortos, más alta será la calificación final. Seleccionó una muestra aleatoria de 15 estudiantes de su clase con los siguientes datos:\n",
        "\n",
        "| Promedio de exámenes cortos | Promedio final |\n",
        "|--------------|--------------|\n",
        "| 59 | 64 |\n",
        "| 92 | 84 |\n",
        "| 72 | 77 |\n",
        "| 90 | 80 |\n",
        "| 95 | 77 |\n",
        "| 87 | 81 |\n",
        "| 89 | 80 |\n",
        "| 77 | 84 |\n",
        "| 76 | 80 |\n",
        "| 65 | 69 |\n",
        "| 97 | 83 |\n",
        "| 42 | 40 |\n",
        "| 94 | 78 |\n",
        "| 62 | 65 |\n",
        "| 91 | 90 |\n",
        "\n",
        "\n",
        "\n",
        "1.   Establesca una variable dependiente ($Y$) y una variable independiente ($X$).\n",
        "2.   Realice un diagrama de dispersión para estos datos.\n",
        "3. ¿Los datos soportan la suposición de linealidad?\n",
        "4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de dispersión.\n",
        "7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de regresión ajustada ($b_1$)\n",
        "8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente, ¿Parece que se verifican los supuestos?\n",
        "9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "10. Realice la prueba de Brausch-Pagan para los residuales y comente el resultado.\n",
        "11. Tres estudiantes sacaron 70, 75 y 84 de calificación. Según la recta de regresión ajustada, ¿cuáles son los resultados esperados para estos tres alumnos?\n",
        "12. Realice una tabla ANOVA e interprete el resultado.\n",
        "\n"
      ],
      "metadata": {
        "id": "xDXxbFV88kQo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#1 y y x\n",
        "import pandas as pd\n",
        "df=pd.DataFrame({\"examenes_cortos\":[59,92,72,90,95,87,89,77,76,65,97,42,94,62,91],\"promedio_final\":[64,84,77,80,77,81,80,84,80,69,83,40,78,65,90]})\n",
        "df.head()\n",
        "x=df[\"examenes_cortos\"]\n",
        "y=df[\"promedio_final\"]\n",
        "\n",
        "#2 Diagrama de dispersion\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(12,6),dpi=100)\n",
        "plt.title(\"Grafico de dispersion\")\n",
        "plt.scatter(x,y,label=\"precio\",color=\"pink\")\n",
        "plt.xlabel(\"Examenes cortos\")\n",
        "plt.ylabel(\"Examen final\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.gca().spines[[\"top\",\"right\"]].set_visible(False)\n",
        "\n",
        "\n",
        "#4 coeficiente de corelacion\n",
        "print(\"Coeficiente de corelacion\")\n",
        "sxx=(((x-x.mean())**2).sum())\n",
        "syy=(((y-y.mean())**2).sum())\n",
        "sxy=((x-x.mean())*(y-y.mean())).sum()\n",
        "r=sxy/((sxx*syy)**0.5)\n",
        "print(r)\n",
        "\n",
        "#5 Coeficiente de determinacion\n",
        "print(r**2)\n",
        "\n",
        "#6 Recta de regrecion ajustada\n",
        "b1=sxy/sxx\n",
        "b0=y.mean()-b1*x.mean()\n",
        "yc=b0+b1*x#RECTA DE REGRESION AJUSTABLE\n",
        "plt.plot(x,yc,label=\"Recta de regresion\",color=\"red\")\n",
        "\n",
        "#7 Intervalo de confianza\n",
        "print(\"Intervalo de confianza b1\")\n",
        "n=len(x)\n",
        "sse=((y-yc)**2).sum()\n",
        "se_b1=((sse/(n-2))/sxx)**0.5\n",
        "nivel_significancia=0.05\n",
        "from scipy.stats import t\n",
        "T=t.ppf(1-nivel_significancia/2,df=n-2)\n",
        "print(f\"{b1-T*se_b1}<b1<{b1+T*se_b1}\")\n",
        "\n",
        "#8\n",
        "residuales=y-yc\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(12,6),dpi=100)\n",
        "plt.title(\"Grafico de dispersion\")\n",
        "plt.scatter(x,residuales,label=\"precio\",color=\"pink\")\n",
        "plt.axhline(y=0,color=\"green\", linestyle=\"--\")\n",
        "plt.xlabel(\"Examenes cortos\")\n",
        "plt.ylabel(\"Examen final\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.gca().spines[[\"top\",\"right\"]].set_visible(False)\n",
        "\n",
        "\n",
        "#Shapiro tiene una hipotesis nula\n",
        "#Ho:los datos siguen una distribucion normal) H1:no siguen una distribucion normal\n",
        "\n",
        "#9 Prueba shapiro\n",
        "print(\"Prueba shapiro\")\n",
        "from scipy.stats import shapiro\n",
        "estadistico_shapiro,valor_p_shapiro=shapiro(residuales)\n",
        "print(\"Estadistoico shapiro\")\n",
        "print(estadistico_shapiro)\n",
        "print(\"Valor shapiro\")\n",
        "print(valor_p_shapiro)\n",
        "# se acepta la hipotesis nula Ho\n",
        "\n",
        "print(\"punto 11\")\n",
        "print(b0)\n",
        "print(b1)\n",
        "print(\"x=70,y=\",b0+b1*70)\n",
        "print(\"x=75,y=\",b0+b1*75)\n",
        "print(\"x=84,y=\",b0+b1*84)\n"
      ],
      "metadata": {
        "id": "6e2t8OlC337R",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "efa4746a-db81-4931-d723-e23bae9ace3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coeficiente de corelacion\n",
            "0.8646014213752985\n",
            "0.7475356178441864\n",
            "Intervalo de confianza b1\n",
            "0.4192186844374576<b1<0.8671410401752792\n",
            "Prueba shapiro\n",
            "Estadistoico shapiro\n",
            "0.9731638066576076\n",
            "Valor shapiro\n",
            "0.901827735700704\n",
            "punto 11\n",
            "24.52682157200229\n",
            "0.6431798623063684\n",
            "x=70,y= 69.54941193344808\n",
            "x=75,y= 72.76531124497993\n",
            "x=84,y= 78.55393000573724\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Establesca una variable dependiente ( Y ) y una variable independiente ( X ).\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "      \"examenes_cortos\": [59,92,72,90,95,87,89,77,76,65,97,42,94,62,91], # exámenes cortos\n",
        "      \"promedio_final\": [64,84,77,80,77,81,80,84,80,69,83,40,78,65,90]}) # promedio final\n",
        "\n",
        "x = df[\"examenes_cortos\"]\n",
        "y = df[\"promedio_final\"]\n",
        "\n",
        "# 2. Realice un diagrama de dispersión para estos datos.\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize = (16, 8), dpi = 100)\n",
        "plt.scatter(x, y, label = \"Promedio final\", color = 'red')\n",
        "plt.xlabel('Exámenes cortos') # nombrar eje x\n",
        "plt.ylabel('Promedio final') # nombrar eje y\n",
        "plt.gca().spines[[\"top\",\"right\"]].set_visible(False)\n",
        "\n",
        "# 3. ¿Los datos soportan la suposición de linealidad?\n",
        "# Sí\n",
        "\n",
        "# 4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "from scipy.stats import pearsonr\n",
        "r, _ = pearsonr(x, y)\n",
        "print(f'Coeficiente de correlación: {r: 0.4f}\\n')\n",
        "\n",
        "# 6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de\n",
        "# dispersión.\n",
        "import statsmodels.api as sm\n",
        "x_constante = sm.add_constant(x)\n",
        "modelo = sm.OLS(y, x_constante).fit()\n",
        "\n",
        "yc = modelo.predict(x_constante)\n",
        "\n",
        "plt.plot(x, yc, color = 'black', linestyle = '--')\n",
        "\n",
        "# 5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "from sklearn.metrics import r2_score  # recomendada\n",
        "r2 = r2_score(y, yc)\n",
        "print(f'Coeficiente de determinación: {r2: 0.4f}\\n')\n",
        "\n",
        "# 7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de\n",
        "# regresión ajustada ( b1 )\n",
        "nivel_de_confianza = 0.95\n",
        "intervalo_de_confianza = modelo.conf_int(alpha = 1 - nivel_de_confianza)\n",
        "intervalo_de_confianza_b1 = intervalo_de_confianza.iloc[1]\n",
        "print(f'Intervalo de confianza para b1 de {nivel_de_confianza: 0.0%}')\n",
        "print(f'{intervalo_de_confianza_b1[0]: 0.4f} < b1 < {intervalo_de_confianza_b1[1]: 0.4f}\\n')\n",
        "\n",
        "# 8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente,\n",
        "# ¿Parece que se verifican los supuestos?\n",
        "residuales = modelo.resid\n",
        "plt.figure()\n",
        "plt.scatter(x, residuales, color = 'blue')\n",
        "plt.xlabel('Examenes cortos')\n",
        "plt.ylabel('Residuales')\n",
        "plt.axhline(y = 0, color = 'gray', linestyle = '--')\n",
        "plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "\n",
        "# 9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "from scipy.stats import shapiro\n",
        "_, valor_p_sh = shapiro(residuales)\n",
        "print(f'valor-p de Shapiro: {valor_p_sh: 0.4f}\\n')\n",
        "\n",
        "# 10. Realice la prueba de Brausch-Pagan para los residuales y comente el\n",
        "# resultado.\n",
        "from statsmodels.stats.api import het_breuschpagan\n",
        "_, valor_p_bp, _, _ = het_breuschpagan(residuales, x_constante)\n",
        "print(f'valor_p de Breusch-Pagan: {valor_p_bp: 0.4f}\\n')\n",
        "\n",
        "# 11. Tres estudiantes sacaron 70, 75 y 84 de calificación. Según la recta de\n",
        "# regresión ajustada, ¿cuáles son los resultados esperados para estos tres alumnos?\n",
        "print(f'para x = 70, y = {modelo.predict([1, 70])}')\n",
        "print(f'para x = 75, y = {modelo.predict([1, 75])}')\n",
        "print(f'para x = 84, y = {modelo.predict([1, 84])}\\n')\n",
        "\n",
        "# 12. Realice una tabla ANOVA e interprete el resultado.\n",
        "from statsmodels.formula.api import ols\n",
        "# Y ~ X\n",
        "modelo_lineal = ols('promedio_final ~ examenes_cortos', data = df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo_lineal)\n",
        "tabla_anova\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "H1yXSz3BTWY5",
        "outputId": "0568ac42-27a0-426d-a31e-2675a5620ff3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coeficiente de correlación:  0.8646\n",
            "\n",
            "Coeficiente de determinación:  0.7475\n",
            "\n",
            "Intervalo de confianza para b1 de  95%\n",
            " 0.4192 < b1 <  0.8671\n",
            "\n",
            "valor-p de Shapiro:  0.9018\n",
            "\n",
            "valor_p de Breusch-Pagan:  0.2289\n",
            "\n",
            "para x = 70, y = [69.54941193]\n",
            "para x = 75, y = [72.76531124]\n",
            "para x = 84, y = [78.55393001]\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   df       sum_sq      mean_sq          F    PR(>F)\n",
              "examenes_cortos   1.0  1538.228959  1538.228959  38.492412  0.000032\n",
              "Residual         13.0   519.504375    39.961875        NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bbd35c17-821e-448b-a98e-30fe659de87d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>examenes_cortos</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1538.228959</td>\n",
              "      <td>1538.228959</td>\n",
              "      <td>38.492412</td>\n",
              "      <td>0.000032</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>13.0</td>\n",
              "      <td>519.504375</td>\n",
              "      <td>39.961875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbd35c17-821e-448b-a98e-30fe659de87d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bbd35c17-821e-448b-a98e-30fe659de87d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bbd35c17-821e-448b-a98e-30fe659de87d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f1604306-d126-42fb-b2bc-bb470ca9d3f3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1604306-d126-42fb-b2bc-bb470ca9d3f3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f1604306-d126-42fb-b2bc-bb470ca9d3f3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c7749a8c-b2e0-4d9b-94db-c352b0afec3c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c7749a8c-b2e0-4d9b-94db-c352b0afec3c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.48528137423857,\n        \"min\": 1.0,\n        \"max\": 13.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          13.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 720.3470615435442,\n        \"min\": 519.5043746414229,\n        \"max\": 1538.2289586919098,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          519.5043746414229,\n          1538.2289586919098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1059.434814926646,\n        \"min\": 39.96187497241715,\n        \"max\": 1538.2289586919098,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          39.96187497241715,\n          1538.2289586919098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 38.492412074099136,\n        \"max\": 38.492412074099136,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38.492412074099136\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.197184416234521e-05,\n        \"max\": 3.197184416234521e-05,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.197184416234521e-05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problema 2\n",
        "William Hawkins, vicepresidente de personal de la International Motors, trabaja en la relación entre el salario de un trabajador y el porcentaje de ausentismo. Hawkins dividió el intervalo de salarios de International en 12 grados o niveles (1 es el menor grado, 12 el más alto) y después muestreó aleatoriamente a un grupo de trabajadores. Determinó el grado de salario de cada trabajador y el número de días que ese empleado había faltado en los últimos 3 años.\n",
        "\n",
        "| Categoría de salario | 11 | 10 | 8  | 5  | 9  | 7  | 3  |\n",
        "|----------------------|----|----|----|----|----|----|----|\n",
        "| Ausencias           | 18 | 17 | 29 | 36 | 11 | 28 | 35 |\n",
        "\n",
        "| Categoría de salario | 11 | 8  | 7  | 2  | 9  | 8  | 3  |\n",
        "|----------------------|----|----|----|----|----|----|----|\n",
        "| Ausencias           | 14 | 20 | 32 | 39 | 16 | 31 | 40 |\n",
        "\n",
        "1.   Establesca una variable dependiente ($Y$) y una variable independiente ($X$).\n",
        "2.   Realice un diagrama de dispersión para estos datos.\n",
        "3. ¿Los datos soportan la suposición de linealidad?\n",
        "4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de dispersión.\n",
        "7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de regresión ajustada ($b_1$)\n",
        "8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente, ¿Parece que se verifican los supuestos?\n",
        "9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "10. Realice la prueba de Brausch-Pagan para los residuales y comente el resultado.\n",
        "11. Utiliza la recta de regresión para interpolar dos valores y extrapolar uno. Comenta estos resultados.\n",
        "12. Realice una tabla ANOVA e interprete el resultado."
      ],
      "metadata": {
        "id": "xgzyiByuTttS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Establesca una variable dependiente ( Y ) y una variable independiente ( X ).\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "      \"salario\": [11,10,8,5,9,7,3,11,8,7,2,9,8,3],\"ausencias\": [18,17,29,36,11,28,35,14,20,32,39,16,31,40]}) # ausencias\n",
        "print(df)\n",
        "x = df[\"salario\"]\n",
        "y = df[\"ausencias\"]\n",
        "\n",
        "\n",
        "# 2. Realice un diagrama de dispersión para estos datos.\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize = (16, 8), dpi = 100)\n",
        "plt.scatter(x, y, label = \"salario\", color = 'red')\n",
        "plt.xlabel('salario') # nombrar eje x\n",
        "plt.ylabel('ausencias') # nombrar eje y\n",
        "plt.gca().spines[[\"top\",\"right\"]].set_visible(False)\n",
        "\n",
        "\n",
        "# 3. ¿Los datos soportan la suposición de linealidad?\n",
        "# Sí\n",
        "\n",
        "\n",
        "\n",
        "# 4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "from scipy.stats import pearsonr\n",
        "r, _ = pearsonr(x, y)\n",
        "print(f'Coeficiente de correlación: {r: 0.4f}\\n')\n",
        "\n",
        "\n",
        "\n",
        "# 6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de\n",
        "# dispersión.\n",
        "import statsmodels.api as sm\n",
        "x_constante = sm.add_constant(x)\n",
        "modelo = sm.OLS(y, x_constante).fit()\n",
        "\n",
        "yc = modelo.predict(x_constante)\n",
        "\n",
        "plt.plot(x, yc, color = 'black', linestyle = '--')\n",
        "\n",
        "\n",
        "\n",
        "# 5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "from sklearn.metrics import r2_score  # recomendada\n",
        "r2 = r2_score(y, yc)\n",
        "print(f'Coeficiente de determinación: {r2: 0.4f}\\n')\n",
        "\n",
        "\n",
        "\n",
        "# 7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de\n",
        "# regresión ajustada ( b1 )\n",
        "nivel_de_confianza = 0.95\n",
        "intervalo_de_confianza = modelo.conf_int(alpha = 1 - nivel_de_confianza)\n",
        "intervalo_de_confianza_b1 = intervalo_de_confianza.iloc[1]\n",
        "print(f'Intervalo de confianza para b1 de {nivel_de_confianza: 0.0%}')\n",
        "print(f'{intervalo_de_confianza_b1[0]: 0.4f} < b1 < {intervalo_de_confianza_b1[1]: 0.4f}\\n')\n",
        "\n",
        "\n",
        "# 8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente,\n",
        "# ¿Parece que se verifican los supuestos?\n",
        "residuales = modelo.resid\n",
        "plt.figure()\n",
        "plt.scatter(x, residuales, color = 'blue')\n",
        "plt.xlabel('salarios')\n",
        "plt.ylabel('ausencias')\n",
        "plt.axhline(y = 0, color = 'gray', linestyle = '--')\n",
        "plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "\n",
        "\n",
        "\n",
        "# 9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "from scipy.stats import shapiro\n",
        "_, valor_p_sh = shapiro(residuales)\n",
        "print(f'valor-p de Shapiro: {valor_p_sh: 0.4f}\\n')\n",
        "\n",
        "\n",
        "\n",
        "# 10. Realice la prueba de Brausch-Pagan para los residuales y comente el\n",
        "# resultado.\n",
        "from statsmodels.stats.api import het_breuschpagan\n",
        "_, valor_p_bp, _, _ = het_breuschpagan(residuales, x_constante)\n",
        "print(f'valor_p de Breusch-Pagan: {valor_p_bp: 0.4f}\\n')\n",
        "\n",
        "\n",
        "\n",
        "# 11. Tres estudiantes sacaron 70, 75 y 84 de calificación. Según la recta de\n",
        "# regresión ajustada, ¿cuáles son los resultados esperados para estos tres alumnos?\n",
        "print(f'para x = 70, y = {modelo.predict([1, 70])}')\n",
        "print(f'para x = 75, y = {modelo.predict([1, 75])}')\n",
        "print(f'para x = 84, y = {modelo.predict([1, 84])}\\n')\n",
        "\n",
        "\n",
        "# 12. Realice una tabla ANOVA e interprete el resultado.\n",
        "from statsmodels.formula.api import ols\n",
        "# Y ~ X\n",
        "modelo_lineal = ols('salario ~ ausencias', data = df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo_lineal)\n",
        "tabla_anova\n",
        "\n",
        "\n",
        "#RESUMEN\n",
        "#Hay relacion entre \"x\" y \"y\" anova,r,r2\n",
        "#Hay linealidad\n",
        "#Hay normalidad shapiro\n",
        "#Hay homoscedasticidad breush pegan\n",
        "#Hay independencia entre puntos"
      ],
      "metadata": {
        "id": "sYLS_Iu6K1sF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "cb9ac2e8-e209-4b44-c586-5d71ef5decc5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    salario  ausencias\n",
            "0        11         18\n",
            "1        10         17\n",
            "2         8         29\n",
            "3         5         36\n",
            "4         9         11\n",
            "5         7         28\n",
            "6         3         35\n",
            "7        11         14\n",
            "8         8         20\n",
            "9         7         32\n",
            "10        2         39\n",
            "11        9         16\n",
            "12        8         31\n",
            "13        3         40\n",
            "Coeficiente de correlación: -0.8801\n",
            "\n",
            "Coeficiente de determinación:  0.7746\n",
            "\n",
            "Intervalo de confianza para b1 de  95%\n",
            "-3.9625 < b1 < -1.9549\n",
            "\n",
            "valor-p de Shapiro:  0.8933\n",
            "\n",
            "valor_p de Breusch-Pagan:  0.4505\n",
            "\n",
            "para x = 70, y = [-159.61983471]\n",
            "para x = 75, y = [-174.41322314]\n",
            "para x = 84, y = [-201.04132231]\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             df     sum_sq    mean_sq          F    PR(>F)\n",
              "ausencias   1.0  87.034348  87.034348  41.243954  0.000033\n",
              "Residual   12.0  25.322795   2.110233        NaN       NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c8b3b05-e4de-4f5f-86b7-eb0b43b65853\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ausencias</th>\n",
              "      <td>1.0</td>\n",
              "      <td>87.034348</td>\n",
              "      <td>87.034348</td>\n",
              "      <td>41.243954</td>\n",
              "      <td>0.000033</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>12.0</td>\n",
              "      <td>25.322795</td>\n",
              "      <td>2.110233</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c8b3b05-e4de-4f5f-86b7-eb0b43b65853')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c8b3b05-e4de-4f5f-86b7-eb0b43b65853 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c8b3b05-e4de-4f5f-86b7-eb0b43b65853');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-994c6675-4391-4bd6-9bef-6479dfd8c153\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-994c6675-4391-4bd6-9bef-6479dfd8c153')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-994c6675-4391-4bd6-9bef-6479dfd8c153 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_103eb356-23bd-42f5-8a4e-57613af64d28\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_103eb356-23bd-42f5-8a4e-57613af64d28 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.7781745930520225,\n        \"min\": 1.0,\n        \"max\": 12.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          12.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.63665781470309,\n        \"min\": 25.322794779477945,\n        \"max\": 87.03434807766496,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          25.322794779477945,\n          87.03434807766496\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60.050417729603566,\n        \"min\": 2.1102328982898286,\n        \"max\": 87.03434807766496,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.1102328982898286,\n          87.03434807766496\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 41.243953758942524,\n        \"max\": 41.243953758942524,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          41.243953758942524\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.2928930886953195e-05,\n        \"max\": 3.2928930886953195e-05,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.2928930886953195e-05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problema 3\n",
        "A menudo, quienes hacen la contabilidad de costos estiman los gastos generales con base en el nivel de producción. En Standard Knitting Co. han reunido información acerca de los gastos generales y las unidades producidas en diferentes plantas.\n",
        "\n",
        "| Gastos generales | 191 | 170 | 272 | 155 | 280 | 173 | 234 | 116 | 153 | 178 |\n",
        "|------------------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n",
        "| Unidades        |  40 |  42 |  53 |  35 |  56 |  39 |  48 |  30 |  37 |  40 |\n",
        "\n",
        "1.   Establesca una variable dependiente ($Y$) y una variable independiente ($X$).\n",
        "2.   Realice un diagrama de dispersión para estos datos.\n",
        "3. ¿Los datos soportan la suposición de linealidad?\n",
        "4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de dispersión.\n",
        "7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de regresión ajustada ($b_1$)\n",
        "8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente, ¿Parece que se verifican los supuestos?\n",
        "9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "10. Realice la prueba de Brausch-Pagan para los residuales y comente el resultado.\n",
        "11. Utiliza la recta de regresión para interpolar dos valores y extrapolar uno. Comenta estos resultados.\n",
        "12. Realice una tabla ANOVA e interprete el resultado.\n"
      ],
      "metadata": {
        "id": "fNYVSwWjchRu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Establesca una variable dependiente ( Y ) y una variable independiente ( X ).\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "      \"gastos_generales\": [191,170,272,155,280,173,234,116,153,178],\"unidades\": [40,42,53,35,56,39,48,30,37,40]})\n",
        "x = df[\"unidades\"]\n",
        "y = df[\"gastos_generales\"]\n",
        "print(df)\n",
        "\n",
        "# 2. Realice un diagrama de dispersión para estos datos.\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize = (16, 8), dpi = 100)\n",
        "plt.scatter(x, y, label = \"unidades\", color = 'red')\n",
        "plt.xlabel('unidades') # nombrar eje x\n",
        "plt.ylabel('gastos_generales') # nombrar eje y\n",
        "plt.gca().spines[[\"top\",\"right\"]].set_visible(False)\n",
        "\n",
        "# 3. ¿Los datos soportan la suposición de linealidad?\n",
        "# Sí\n",
        "\n",
        "# 4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "from scipy.stats import pearsonr\n",
        "r, _ = pearsonr(x, y)\n",
        "print(f'Coeficiente de correlación: {r: 0.4f}\\n')\n",
        "\n",
        "# 6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de\n",
        "# dispersión.\n",
        "import statsmodels.api as sm\n",
        "x_constante = sm.add_constant(x)\n",
        "modelo = sm.OLS(y, x_constante).fit()\n",
        "\n",
        "yc = modelo.predict(x_constante)\n",
        "\n",
        "plt.plot(x, yc, color = 'black', linestyle = '--')\n",
        "\n",
        "# 5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "from sklearn.metrics import r2_score  # recomendada\n",
        "r2 = r2_score(y, yc)\n",
        "print(f'Coeficiente de determinación: {r2: 0.4f}\\n')\n",
        "\n",
        "# 7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de\n",
        "# regresión ajustada ( b1 )\n",
        "nivel_de_confianza = 0.95\n",
        "intervalo_de_confianza = modelo.conf_int(alpha = 1 - nivel_de_confianza)\n",
        "intervalo_de_confianza_b1 = intervalo_de_confianza.iloc[1]\n",
        "print(f'Intervalo de confianza para b1 de {nivel_de_confianza: 0.0%}')\n",
        "print(f'{intervalo_de_confianza_b1[0]: 0.4f} < b1 < {intervalo_de_confianza_b1[1]: 0.4f}\\n')\n",
        "\n",
        "# 8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente,\n",
        "# ¿Parece que se verifican los supuestos?\n",
        "residuales = modelo.resid\n",
        "plt.figure()\n",
        "plt.scatter(x, residuales, color = 'blue')\n",
        "plt.xlabel('unidades')\n",
        "plt.ylabel('gastos_generales')\n",
        "plt.axhline(y = 0, color = 'gray', linestyle = '--')\n",
        "plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "\n",
        "# 9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "from scipy.stats import shapiro\n",
        "_, valor_p_sh = shapiro(residuales)\n",
        "print(f'valor-p de Shapiro: {valor_p_sh: 0.4f}\\n')\n",
        "\n",
        "# 10. Realice la prueba de Brausch-Pagan para los residuales y comente el\n",
        "# resultado.\n",
        "from statsmodels.stats.api import het_breuschpagan\n",
        "_, valor_p_bp, _, _ = het_breuschpagan(residuales, x_constante)\n",
        "print(f'valor_p de Breusch-Pagan: {valor_p_bp: 0.4f}\\n')\n",
        "\n",
        "# 11. Tres estudiantes sacaron 40, 45 y 25 de calificación. Según la recta de\n",
        "# regresión ajustada, ¿cuáles son los resultados esperados para estos tres alumnos?\n",
        "print(f'para x = 40, y = {modelo.predict([1, 40])}')\n",
        "print(f'para x = 45, y = {modelo.predict([1, 45])}')\n",
        "print(f'para x = 25, y = {modelo.predict([1, 25])}\\n')\n",
        "\n",
        "# 12. Realice una tabla ANOVA e interprete el resultado.\n",
        "from statsmodels.formula.api import ols\n",
        "# Y ~ X\n",
        "modelo_lineal = ols('gastos_generales ~ unidades', data = df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo_lineal)\n",
        "tabla_anova"
      ],
      "metadata": {
        "id": "A57YusZWQX8i",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "3e3a00cb-9dfc-40ad-a002-793b7feb0880"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   gastos_generales  unidades\n",
            "0               191        40\n",
            "1               170        42\n",
            "2               272        53\n",
            "3               155        35\n",
            "4               280        56\n",
            "5               173        39\n",
            "6               234        48\n",
            "7               116        30\n",
            "8               153        37\n",
            "9               178        40\n",
            "Coeficiente de correlación:  0.9835\n",
            "\n",
            "Coeficiente de determinación:  0.9673\n",
            "\n",
            "Intervalo de confianza para b1 de  95%\n",
            " 5.5184 < b1 <  7.4645\n",
            "\n",
            "valor-p de Shapiro:  0.2205\n",
            "\n",
            "valor_p de Breusch-Pagan:  0.9858\n",
            "\n",
            "para x = 40, y = [179.2170068]\n",
            "para x = 45, y = [211.6744898]\n",
            "para x = 25, y = [81.84455782]\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           df        sum_sq       mean_sq           F        PR(>F)\n",
              "unidades  1.0  24778.042517  24778.042517  236.669535  3.167080e-07\n",
              "Residual  8.0    837.557483    104.694685         NaN           NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39faca4c-9db1-483f-bf3a-5522163a4e82\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>unidades</th>\n",
              "      <td>1.0</td>\n",
              "      <td>24778.042517</td>\n",
              "      <td>24778.042517</td>\n",
              "      <td>236.669535</td>\n",
              "      <td>3.167080e-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>8.0</td>\n",
              "      <td>837.557483</td>\n",
              "      <td>104.694685</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39faca4c-9db1-483f-bf3a-5522163a4e82')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39faca4c-9db1-483f-bf3a-5522163a4e82 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39faca4c-9db1-483f-bf3a-5522163a4e82');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f44e55cc-6567-49f1-aa5b-54bab071819e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f44e55cc-6567-49f1-aa5b-54bab071819e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f44e55cc-6567-49f1-aa5b-54bab071819e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_dfe79105-9699-4c9c-8e10-ee4f65fa91a1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_dfe79105-9699-4c9c-8e10-ee4f65fa91a1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.949747468305833,\n        \"min\": 1.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16928.47931244608,\n        \"min\": 837.5574829931958,\n        \"max\": 24778.042517006812,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          837.5574829931958,\n          24778.042517006812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17446.691566321853,\n        \"min\": 104.69468537414947,\n        \"max\": 24778.042517006812,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          104.69468537414947,\n          24778.042517006812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 236.6695351197344,\n        \"max\": 236.6695351197344,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          236.6695351197344\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.167079738329314e-07,\n        \"max\": 3.167079738329314e-07,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.167079738329314e-07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problema 4\n",
        "Las ventas de línea blanca varían según el estado del mercado de casas nuevas: cuando las ventas de casas nuevas son buenas, también lo son las de lavaplatos, lavadoras de ropa, secadoras y refrigeradores.\n",
        "Una asociación de comercio compiló los siguientes datos históricos (en miles de unidades) de las ventas de línea blanca y la construcción de casas.\n",
        "\n",
        "| Construcción de casas (miles) | Ventas de línea blanca (miles) |\n",
        "|-------------------------------|--------------------------------|\n",
        "| 2.0                           | 5.0                            |\n",
        "| 2.5                           | 5.5                            |\n",
        "| 3.2                           | 6.0                            |\n",
        "| 3.6                           | 7.0                            |\n",
        "| 3.7                           | 7.2                            |\n",
        "| 4.0                           | 7.7                            |\n",
        "| 4.2                           | 8.4                            |\n",
        "| 4.6                           | 9.0                            |\n",
        "| 4.8                           | 9.7                            |\n",
        "| 5.0                           | 10.0                           |\n",
        "\n",
        "1.   Establesca una variable dependiente ($Y$) y una variable independiente ($X$).\n",
        "2.   Realice un diagrama de dispersión para estos datos.\n",
        "3. ¿Los datos soportan la suposición de linealidad?\n",
        "4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de dispersión.\n",
        "7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de regresión ajustada ($b_1$)\n",
        "8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente, ¿Parece que se verifican los supuestos?\n",
        "9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "10. Realice la prueba de Brausch-Pagan para los residuales y comente el resultado.\n",
        "11. Utiliza la recta de regresión para interpolar dos valores y extrapolar uno. Comenta estos resultados.\n",
        "12. Realice una tabla ANOVA e interprete el resultado."
      ],
      "metadata": {
        "id": "9-_ZpHNattbm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Establesca una variable dependiente ( Y ) y una variable independiente ( X ).\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "      \"construccion_de_casas\": [2.0,2.5,3.2,3.6,3.7,4.0,4.2,4.6,4.8,5.0],\"ventas_de_linea_blanca\": [5.0,5.5,6.0,7.0,7.2,7.7,8.4,9.0,9.7,10.0]})\n",
        "x = df[\"construccion_de_casas\"]\n",
        "y = df[\"ventas_de_linea_blanca\"]\n",
        "print(df)\n",
        "\n",
        "# 2. Realice un diagrama de dispersión para estos datos.\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize = (16, 8), dpi = 100)\n",
        "plt.scatter(x, y, label = \"ventas_de_linea_blanca\", color = 'red')\n",
        "plt.xlabel('construccion_de_casas') # nombrar eje x\n",
        "plt.ylabel('ventas_de_linea_blanca') # nombrar eje y\n",
        "plt.gca().spines[[\"top\",\"right\"]].set_visible(False)\n",
        "\n",
        "# 3. ¿Los datos soportan la suposición de linealidad?\n",
        "# No\n",
        "\n",
        "# 4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "from scipy.stats import pearsonr\n",
        "r, _ = pearsonr(x, y)\n",
        "print(f'Coeficiente de correlación: {r: 0.4f}\\n')\n",
        "\n",
        "# 6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de\n",
        "# dispersión.\n",
        "import statsmodels.api as sm\n",
        "x_constante = sm.add_constant(x)\n",
        "modelo = sm.OLS(y, x_constante).fit()\n",
        "\n",
        "yc = modelo.predict(x_constante)\n",
        "\n",
        "plt.plot(x, yc, color = 'black', linestyle = '--')\n",
        "\n",
        "# 5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "from sklearn.metrics import r2_score  # recomendada\n",
        "r2 = r2_score(y, yc)\n",
        "print(f'Coeficiente de determinación: {r2: 0.4f}\\n')\n",
        "\n",
        "# 7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de\n",
        "# regresión ajustada ( b1 )\n",
        "nivel_de_confianza = 0.95\n",
        "intervalo_de_confianza = modelo.conf_int(alpha = 1 - nivel_de_confianza)\n",
        "intervalo_de_confianza_b1 = intervalo_de_confianza.iloc[1]\n",
        "print(f'Intervalo de confianza para b1 de {nivel_de_confianza: 0.0%}')\n",
        "print(f'{intervalo_de_confianza_b1[0]: 0.4f} < b1 < {intervalo_de_confianza_b1[1]: 0.4f}\\n')\n",
        "\n",
        "# 8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente,\n",
        "# ¿Parece que se verifican los supuestos?\n",
        "residuales = modelo.resid\n",
        "plt.figure()\n",
        "plt.scatter(x, residuales, color = 'blue')\n",
        "plt.xlabel('construccion_de_casas')\n",
        "plt.ylabel('ventas_de_linea_blanca')\n",
        "plt.axhline(y = 0, color = 'gray', linestyle = '--')\n",
        "plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "\n",
        "# 9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "from scipy.stats import shapiro\n",
        "_, valor_p_sh = shapiro(residuales)\n",
        "print(f'valor-p de Shapiro: {valor_p_sh: 0.4f}\\n')\n",
        "\n",
        "# 10. Realice la prueba de Brausch-Pagan para los residuales y comente el\n",
        "# resultado.\n",
        "from statsmodels.stats.api import het_breuschpagan\n",
        "_, valor_p_bp, _, _ = het_breuschpagan(residuales, x_constante)\n",
        "print(f'valor_p de Breusch-Pagan: {valor_p_bp: 0.4f}\\n')\n",
        "\n",
        "# 11. Tres estudiantes sacaron 40, 45 y 25 de calificación. Según la recta de\n",
        "# regresión ajustada, ¿cuáles son los resultados esperados para estos tres alumnos?\n",
        "print(f'para x = 2.5, y = {modelo.predict([1, 2.5])}')\n",
        "print(f'para x = 4.0, y = {modelo.predict([1, 4.0])}')\n",
        "print(f'para x = 5.5, y = {modelo.predict([1, 5.5])}\\n')\n",
        "\n",
        "# 12. Realice una tabla ANOVA e interprete el resultado.\n",
        "from statsmodels.formula.api import ols\n",
        "# Y ~ X\n",
        "modelo_lineal = ols('construccion_de_casas ~ ventas_de_linea_blanca', data = df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo_lineal)\n",
        "tabla_anova\n"
      ],
      "metadata": {
        "id": "GPjzAEM-t34D",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "661beb34-2a22-47de-89f8-2de31011d316"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   construccion_de_casas  ventas_de_linea_blanca\n",
            "0                    2.0                     5.0\n",
            "1                    2.5                     5.5\n",
            "2                    3.2                     6.0\n",
            "3                    3.6                     7.0\n",
            "4                    3.7                     7.2\n",
            "5                    4.0                     7.7\n",
            "6                    4.2                     8.4\n",
            "7                    4.6                     9.0\n",
            "8                    4.8                     9.7\n",
            "9                    5.0                    10.0\n",
            "Coeficiente de correlación:  0.9808\n",
            "\n",
            "Coeficiente de determinación:  0.9619\n",
            "\n",
            "Intervalo de confianza para b1 de  95%\n",
            " 1.4557 < b1 <  2.0194\n",
            "\n",
            "valor-p de Shapiro:  0.8464\n",
            "\n",
            "valor_p de Breusch-Pagan:  0.1581\n",
            "\n",
            "para x = 2.5, y = [5.36066946]\n",
            "para x = 4.0, y = [7.96701534]\n",
            "para x = 5.5, y = [10.57336123]\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         df    sum_sq   mean_sq           F        PR(>F)\n",
              "ventas_de_linea_blanca  1.0  8.276338  8.276338  202.069951  5.841003e-07\n",
              "Residual                8.0  0.327662  0.040958         NaN           NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e70286d1-98bf-493c-9b49-934e1238f4dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ventas_de_linea_blanca</th>\n",
              "      <td>1.0</td>\n",
              "      <td>8.276338</td>\n",
              "      <td>8.276338</td>\n",
              "      <td>202.069951</td>\n",
              "      <td>5.841003e-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>8.0</td>\n",
              "      <td>0.327662</td>\n",
              "      <td>0.040958</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e70286d1-98bf-493c-9b49-934e1238f4dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e70286d1-98bf-493c-9b49-934e1238f4dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e70286d1-98bf-493c-9b49-934e1238f4dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d45c87cb-4b28-41cb-9b51-93bca6593fbd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d45c87cb-4b28-41cb-9b51-93bca6593fbd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d45c87cb-4b28-41cb-9b51-93bca6593fbd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_a94516d4-044d-40f2-b470-a1c1f0a0927a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a94516d4-044d-40f2-b470-a1c1f0a0927a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.949747468305833,\n        \"min\": 1.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.620562298340375,\n        \"min\": 0.3276622847620807,\n        \"max\": 8.276337715237933,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3276622847620807,\n          8.276337715237933\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.823292993897926,\n        \"min\": 0.04095778559526009,\n        \"max\": 8.276337715237933,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.04095778559526009,\n          8.276337715237933\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 202.0699506810184,\n        \"max\": 202.0699506810184,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          202.0699506810184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.841003144127814e-07,\n        \"max\": 5.841003144127814e-07,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.841003144127814e-07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problema 5\n",
        "William C. Andrews, consultor de comportamiento organizacional de Victory Motorcycles, ha diseñado una prueba para mostrar a los supervisores de la compañía los peligros de sobrevigilar a sus trabajadores.\n",
        "Un trabajador de la línea de ensamble tiene a su cargo una serie de tareas complicadas. Durante el desempeño del trabajador, un inspector lo interrumpe constantemente para ayudarlo a terminar las tareas.\n",
        "El trabajador, después de terminar su trabajo, recibe una prueba psicológica diseñada para medir la hostilidad del trabajador hacia la autoridad\n",
        "(una alta puntuación implica una hostilidad baja). A ocho distintos trabajadores se les asignaron las tareas y luego se les interrumpió para darles instrucciones útiles un número variable de veces (línea X).\n",
        "Sus calificaciones en la prueba de hostilidad se dan en el renglón Y.\n",
        "\n",
        "| número interrupciones al trabajador |  5  | 10  | 10  | 15  | 15  | 20  | 20  | 25  |\n",
        "|-----------------------------------------|----|----|----|----|----|----|----|----|\n",
        "| calificación del trabajador en la prueba de hostilidad | 58  | 41  | 45  | 27  | 26  | 12  | 16  |  3  |\n",
        "\n",
        "1.   Establesca una variable dependiente ($Y$) y una variable independiente ($X$).\n",
        "2.   Realice un diagrama de dispersión para estos datos.\n",
        "3. ¿Los datos soportan la suposición de linealidad?\n",
        "4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de dispersión.\n",
        "7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de regresión ajustada ($b_1$)\n",
        "8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente, ¿Parece que se verifican los supuestos?\n",
        "9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "10. Realice la prueba de Brausch-Pagan para los residuales y comente el resultado.\n",
        "11. Utiliza la recta de regresión para interpolar dos valores y extrapolar uno. Comenta estos resultados.\n",
        "12. Realice una tabla ANOVA e interprete el resultado."
      ],
      "metadata": {
        "id": "x6oH2vATt4Sm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Establesca una variable dependiente ( Y ) y una variable independiente ( X ).\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\"número_interrupcionesl_al_rabajador\": [5,10,10,15,15,20,20,25],\"calificación_del_trabajador_en_la_pruebade_hostilidad\": [58,41,45,27,26,12,16,3]})\n",
        "\n",
        "x = df[\"número_interrupcionesl_al_rabajador\"]\n",
        "y = df[\"calificación_del_trabajador_en_la_pruebade_hostilidad\"]\n",
        "print(df)\n",
        "\n",
        "# 2. Realice un diagrama de dispersión para estos datos.\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize = (16, 8), dpi = 100)\n",
        "plt.scatter(x, y, label = \"calificación_del_trabajador_en_la_pruebade_hostilidad\", color = 'red')\n",
        "plt.xlabel('número_interrupcionesl_al_rabajador') # nombrar eje x\n",
        "plt.ylabel('calificación_del_trabajador_en_la_pruebade_hostilidad') # nombrar eje y\n",
        "plt.gca().spines[[\"top\",\"right\"]].set_visible(False)\n",
        "\n",
        "# 3. ¿Los datos soportan la suposición de linealidad?\n",
        "# No\n",
        "\n",
        "# 4. Calcule el coeficiente de correlación e interprete el resultado.\n",
        "from scipy.stats import pearsonr\n",
        "r, _ = pearsonr(x, y)\n",
        "print(f'Coeficiente de correlación: {r: 0.4f}\\n')\n",
        "\n",
        "# 6. Obtenga la recta de regresión ajustada y grafíquelo sobre el gráfico de\n",
        "# dispersión.\n",
        "import statsmodels.api as sm\n",
        "x_constante = sm.add_constant(x)\n",
        "modelo = sm.OLS(y, x_constante).fit()\n",
        "\n",
        "yc = modelo.predict(x_constante)\n",
        "\n",
        "plt.plot(x, yc, color = 'black', linestyle = '--')\n",
        "\n",
        "# 5. Calcule el coeficiente de determinación e interprete el resultado.\n",
        "from sklearn.metrics import r2_score  # recomendada\n",
        "r2 = r2_score(y, yc)\n",
        "print(f'Coeficiente de determinación: {r2: 0.4f}\\n')\n",
        "\n",
        "# 7. Obtenga un intervalo de confianza del 95% para la pendiente de la recta de\n",
        "# regresión ajustada ( b1 )\n",
        "nivel_de_confianza = 0.95\n",
        "intervalo_de_confianza = modelo.conf_int(alpha = 1 - nivel_de_confianza)\n",
        "intervalo_de_confianza_b1 = intervalo_de_confianza.iloc[1]\n",
        "print(f'Intervalo de confianza para b1 de {nivel_de_confianza: 0.0%}')\n",
        "print(f'{intervalo_de_confianza_b1[0]: 0.4f} < b1 < {intervalo_de_confianza_b1[1]: 0.4f}\\n')\n",
        "\n",
        "# 8. Calcule los residuales y trace un nuevo gráfico de dispersión. Comente,\n",
        "# ¿Parece que se verifican los supuestos?\n",
        "residuales = modelo.resid\n",
        "plt.figure()\n",
        "plt.scatter(x, residuales, color = 'blue')\n",
        "plt.xlabel('número_interrupcionesl_al_rabajador')\n",
        "plt.ylabel('calificación_del_trabajador_en_la_pruebade_hostilidad')\n",
        "plt.axhline(y = 0, color = 'gray', linestyle = '--')\n",
        "plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "\n",
        "# 9. Realice la prueba de Shapiro para los residuales y comente el resultado.\n",
        "from scipy.stats import shapiro\n",
        "_, valor_p_sh = shapiro(residuales)\n",
        "print(f'valor-p de Shapiro: {valor_p_sh: 0.4f}\\n')\n",
        "\n",
        "# 10. Realice la prueba de Brausch-Pagan para los residuales y comente el\n",
        "# resultado.\n",
        "from statsmodels.stats.api import het_breuschpagan\n",
        "_, valor_p_bp, _, _ = het_breuschpagan(residuales, x_constante)\n",
        "print(f'valor_p de Breusch-Pagan: {valor_p_bp: 0.4f}\\n')\n",
        "\n",
        "# 11. Tres estudiantes sacaron 40, 45 y 25 de calificación. Según la recta de\n",
        "# regresión ajustada, ¿cuáles son los resultados esperados para estos tres alumnos?\n",
        "print(f'para x = 10.0, y = {modelo.predict([1, 2.5])}')\n",
        "print(f'para x = 20.0, y = {modelo.predict([1, 4.0])}')\n",
        "print(f'para x = 4.0, y = {modelo.predict([1, 5.5])}\\n')\n",
        "\n",
        "# 12. Realice una tabla ANOVA e interprete el resultado.\n",
        "from statsmodels.formula.api import ols\n",
        "# Y ~ X\n",
        "modelo_lineal = ols('calificación_del_trabajador_en_la_pruebade_hostilidad ~ número_interrupcionesl_al_rabajador', data = df).fit()\n",
        "tabla_anova = sm.stats.anova_lm(modelo_lineal)\n",
        "tabla_anova"
      ],
      "metadata": {
        "id": "5nsXczRfulp8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "4bcbdc21-16fd-4e88-8814-8482584dd4af"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   número_interrupcionesl_al_rabajador  \\\n",
            "0                                    5   \n",
            "1                                   10   \n",
            "2                                   10   \n",
            "3                                   15   \n",
            "4                                   15   \n",
            "5                                   20   \n",
            "6                                   20   \n",
            "7                                   25   \n",
            "\n",
            "   calificación_del_trabajador_en_la_pruebade_hostilidad  \n",
            "0                                                 58      \n",
            "1                                                 41      \n",
            "2                                                 45      \n",
            "3                                                 27      \n",
            "4                                                 26      \n",
            "5                                                 12      \n",
            "6                                                 16      \n",
            "7                                                  3      \n",
            "Coeficiente de correlación: -0.9928\n",
            "\n",
            "Coeficiente de determinación:  0.9858\n",
            "\n",
            "Intervalo de confianza para b1 de  95%\n",
            "-3.1363 < b1 < -2.4637\n",
            "\n",
            "valor-p de Shapiro:  0.0548\n",
            "\n",
            "valor_p de Breusch-Pagan:  0.2482\n",
            "\n",
            "para x = 10.0, y = [63.5]\n",
            "para x = 20.0, y = [59.3]\n",
            "para x = 4.0, y = [55.1]\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                      df  sum_sq      mean_sq           F  \\\n",
              "número_interrupcionesl_al_rabajador  1.0  2352.0  2352.000000  415.058824   \n",
              "Residual                             6.0    34.0     5.666667         NaN   \n",
              "\n",
              "                                           PR(>F)  \n",
              "número_interrupcionesl_al_rabajador  9.090964e-07  \n",
              "Residual                                      NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b9bc1d4-971a-41c5-bc2e-367d364768a6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>df</th>\n",
              "      <th>sum_sq</th>\n",
              "      <th>mean_sq</th>\n",
              "      <th>F</th>\n",
              "      <th>PR(&gt;F)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>número_interrupcionesl_al_rabajador</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2352.0</td>\n",
              "      <td>2352.000000</td>\n",
              "      <td>415.058824</td>\n",
              "      <td>9.090964e-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Residual</th>\n",
              "      <td>6.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>5.666667</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b9bc1d4-971a-41c5-bc2e-367d364768a6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9b9bc1d4-971a-41c5-bc2e-367d364768a6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9b9bc1d4-971a-41c5-bc2e-367d364768a6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ee0094de-98e4-4c24-88a1-271a68c81f59\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ee0094de-98e4-4c24-88a1-271a68c81f59')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ee0094de-98e4-4c24-88a1-271a68c81f59 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_8d171507-1e7c-43a3-9754-d0e93f45cab0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('tabla_anova')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8d171507-1e7c-43a3-9754-d0e93f45cab0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('tabla_anova');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "tabla_anova",
              "summary": "{\n  \"name\": \"tabla_anova\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"df\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5355339059327378,\n        \"min\": 1.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          6.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sum_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1639.073518790416,\n        \"min\": 34.000000000000014,\n        \"max\": 2351.9999999999986,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          34.000000000000014,\n          2351.9999999999986\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_sq\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1659.1082109240351,\n        \"min\": 5.666666666666669,\n        \"max\": 2351.9999999999986,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5.666666666666669,\n          2351.9999999999986\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 415.05882352941137,\n        \"max\": 415.05882352941137,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          415.05882352941137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PR(>F)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.090963971927758e-07,\n        \"max\": 9.090963971927758e-07,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.090963971927758e-07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XA72tO9homxd"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}